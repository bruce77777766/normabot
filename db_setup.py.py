import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.exceptions import ApiError
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import sqlite3
import re
import logging
import datetime
import gspread.utils
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
scope = [
    "https://www.googleapis.com/auth/spreadsheets",
    "https://www.googleapis.com/auth/drive"
]

# –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ä–µ–¥—ã
json_keyfile = os.getenv('GOOGLE_SHEETS_JSON_KEY')
if json_keyfile is None:
    logging.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã GOOGLE_SHEETS_JSON_KEY")
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ä–µ–¥—ã GOOGLE_SHEETS_JSON_KEY")

creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(json_keyfile), scope)

# –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
client = gspread.authorize(creds)

# –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ ID
spreadsheet = client.open("Your Spreadsheet Name")
json_keyfile = os.getenv('GOOGLE_SHEETS_JSON_KEY')
creds = ServiceAccountCredentials.from_json_keyfile_dict(json.loads(json_keyfile), scope)
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
# –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏/–æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
logging.info("–û—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö 'bindings.db'")
conn = sqlite3.connect('bindings.db')
cursor = conn.cursor()
# –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü inactive_column, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
try:
    cursor.execute("ALTER TABLE bindings ADD COLUMN inactive_column TEXT DEFAULT 'E'")
    logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'inactive_column' –≤ —Ç–∞–±–ª–∏—Ü—É 'bindings'")
except sqlite3.OperationalError:
    logging.info("–°—Ç–æ–ª–±–µ—Ü 'inactive_column' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ 'bindings'")

# –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã id_column –∏ answers_column, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
try:
    cursor.execute("ALTER TABLE bindings ADD COLUMN id_column TEXT DEFAULT 'A'")
    logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'id_column' –≤ —Ç–∞–±–ª–∏—Ü—É 'bindings'")
except sqlite3.OperationalError:
    logging.info("–°—Ç–æ–ª–±–µ—Ü 'id_column' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ 'bindings'")

try:
    cursor.execute("ALTER TABLE bindings ADD COLUMN answers_column TEXT DEFAULT 'D'")
    logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'answers_column' –≤ —Ç–∞–±–ª–∏—Ü—É 'bindings'")
except sqlite3.OperationalError:
    logging.info("–°—Ç–æ–ª–±–µ—Ü 'answers_column' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ 'bindings'")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã bindings, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
cursor.execute('''
CREATE TABLE IF NOT EXISTS bindings (
    peer_id INTEGER PRIMARY KEY,
    spreadsheet_id TEXT,
    sheet_name TEXT,
    id_column TEXT DEFAULT 'A',          -- –°—Ç–æ–ª–±–µ—Ü —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é A)
    display_columns TEXT,                -- –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "C,D,A")
    points_column TEXT DEFAULT 'B',      -- –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    warn_column TEXT DEFAULT 'C',        -- –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    answers_column TEXT DEFAULT 'D'      -- –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
)
''')
logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'bindings'")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
cursor.execute('''
CREATE TABLE IF NOT EXISTS screenshot_counter (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    last_number INTEGER DEFAULT 0
)
''')
logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'screenshot_counter'")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü attached_chats –∏ roles
cursor.execute('''
CREATE TABLE IF NOT EXISTS attached_chats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    chat_id INTEGER NOT NULL,
    user_id INTEGER NOT NULL,
    attached_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)
''')
logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'attached_chats'")

cursor.execute('''
CREATE TABLE IF NOT EXISTS roles (
    user_id INTEGER PRIMARY KEY,
    role TEXT
)
''')
logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã 'roles'")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
conn.commit()
logging.info("–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")

attached_chat = None
def get_current_date():
    return datetime.datetime.now().strftime("%d.%m.%Y")
def get_date_column(sheet, date_str):
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    headers = sheet.row_values(1)
    if date_str in headers:
        return headers.index(date_str) + 1  # gspread –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 1-–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é
    else:
        # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë –≤ –∫–æ–Ω—Ü–µ —Ç–∞–±–ª–∏—Ü—ã
        new_col = len(headers) + 1
        sheet.update_cell(1, new_col, date_str)
        return new_col


def handle_unbindscreen_command(peer_id):
    global attached_chat
    if attached_chat == peer_id:
        attached_chat = None  # –û—Ç–≤—è–∑—ã–≤–∞–µ–º –±–µ—Å–µ–¥—É
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –ë–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.",
            random_id=0
        )
        logging.info(f"–ë–µ—Å–µ–¥–∞ {peer_id} –æ—Ç–≤—è–∑–∞–Ω–∞ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.")
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ö†Ô∏è –≠—Ç–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.",
            random_id=0
        )
def send_start_message(peer_id):
    keyboard = VkKeyboard(one_time=False)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    keyboard.add_button('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', color=VkKeyboardColor.PRIMARY)  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–æ–º–∞–Ω–¥—ã /stats

    vk.messages.send(
        peer_id=peer_id,
        message="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
        random_id=0,
        keyboard=keyboard.get_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    )

def get_next_points_number():
    cursor.execute("SELECT last_number FROM screenshot_counter ORDER BY id DESC LIMIT 1")
    result = cursor.fetchone()

    if result:
        current_number = result[0] + 1
    else:
        current_number = 1

    cursor.execute("INSERT INTO screenshot_counter (last_number) VALUES (?)", (current_number,))
    conn.commit()

    return current_number
def set_nektiv_column(peer_id, column, user_role):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_role} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /nsheet –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–æ–ª–±—Ü–∞
    if not re.match(r'^[A-Z]+$', column.upper()):
        vk.messages.send(
            peer_id=peer_id,
            message="üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'C', 'D' –∏ —Ç.–¥.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /nsheet: {column}")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
        UPDATE bindings
        SET inactive_column = ?
        WHERE peer_id = ?
    """, (column.upper(), peer_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    vk.messages.send(
        peer_id=peer_id,
        message=f"‚úÖ –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ **{column.upper()}**.",
        random_id=0
    )
    logging.info(f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –±–µ—Å–µ–¥–µ {peer_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {column.upper()}.")

def add_inactivity_period(peer_id, performer_id, mention, start_date, end_date, user_role):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ admin –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç
    try:
        start_date = datetime.datetime.strptime(start_date, "%d.%m.%Y")
        end_date = datetime.datetime.strptime(end_date, "%d.%m.%Y")
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì.",
            random_id=0
        )
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        target_user_id = extract_user_id(mention)
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
            random_id=0
        )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, inactive_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()
    if not binding:
        vk.messages.send(
            peer_id=peer_id,
            message="Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            random_id=0
        )
        return

    spreadsheet_id, sheet_name, id_column, inactive_column = binding

    if not inactive_column:
        vk.messages.send(
            peer_id=peer_id,
            message="–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /nsheet –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.",
            random_id=0
        )
        return

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ ID
    id_col_index = gspread.utils.a1_to_rowcol(f"{id_column}1")[1]
    id_values = sheet.col_values(id_col_index)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == target_user_id:
                target_row = idx
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message=f"[id{target_user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    inactivity_period = f"{start_date.strftime('%d.%m.%Y')} - {end_date.strftime('%d.%m.%Y')}"
    try:
        inactive_cell = f"{inactive_column}{target_row}"
        sheet.update_acell(inactive_cell, inactivity_period)
        vk.messages.send(
            peer_id=peer_id,
            message=f"–ü–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ [id{target_user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {inactivity_period}.",
            random_id=0
        )
        vk.messages.send(
            user_id=target_user_id,
            message=f"–í–∞—â –ø–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {inactivity_period} ",
            random_id=0
        )
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏
def handle_checkscreen_command(peer_id):
    global attached_chat
    if attached_chat == peer_id:
        vk.messages.send(
            peer_id=peer_id,
            message="‚úÖ –≠—Ç–∞ –±–µ—Å–µ–¥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.",
            random_id=0
        )
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –≠—Ç–∞ –±–µ—Å–µ–¥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.",
            random_id=0
        )
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
def add_column_if_not_exists(table, column, column_type):
    cursor.execute(f"PRAGMA table_info({table})")
    columns = [info[1] for info in cursor.fetchall()]
    if column not in columns:
        cursor.execute(f"ALTER TABLE {table} ADD COLUMN {column} {column_type}")
        conn.commit()
        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü '{column}' –≤ —Ç–∞–±–ª–∏—Ü—É {table}.")

add_column_if_not_exists('bindings', 'display_columns', 'TEXT')
add_column_if_not_exists('bindings', 'points_column', 'TEXT')
add_column_if_not_exists('bindings', 'warn_column', 'TEXT')

# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü points_column, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
cursor.execute("PRAGMA table_info(bindings)")
columns = [info[1] for info in cursor.fetchall()]
if 'points_column' not in columns:
    cursor.execute("ALTER TABLE bindings ADD COLUMN points_column TEXT")
    conn.commit()
    logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'points_column' –≤ —Ç–∞–±–ª–∏—Ü—É bindings.")
# –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü warn_column, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
cursor.execute("PRAGMA table_info(bindings)")
columns = [info[1] for info in cursor.fetchall()]
if 'warn_column' not in columns:
    cursor.execute("ALTER TABLE bindings ADD COLUMN warn_column TEXT")
    conn.commit()
    logging.info("–î–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü 'warn_column' –≤ —Ç–∞–±–ª–∏—Ü—É bindings.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK API
vk_session = vk_api.VkApi(token='vk1.a._Yx4344F-hfIDazZGzTuq74J3jZASNh0yA5ssw6sbBEZmWaOyP2I1-NqLsUinUzqQQjVFqG6eOA4BPAspKellBxzVBdkzb5tiepiP_cj8e7cUKHiCp5TvEv8QOOKKhBcm8umYZmz7vxSN7SE744d6psFRP0Zu9r5UK-ghkZcysMvYMqMoV0Vhz6Ml4e92Mla-XSUgBl9AaavG3MH2SjJCA')
longpoll = VkBotLongPoll(vk_session, '227286490')
vk = vk_session.get_api()

# –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID 730323700 –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
cursor.execute("REPLACE INTO roles (user_id, role) VALUES (?, ?)", (730323700, 'admin'))
conn.commit()
logging.info("–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω (ID: 730323700) –¥–æ–±–∞–≤–ª–µ–Ω.")
def get_next_screenshot_number():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    cursor.execute("SELECT last_number FROM screenshot_counter ORDER BY id DESC LIMIT 1")
    result = cursor.fetchone()

    if result:
        current_number = result[0] + 1
    else:
        current_number = 1  # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    cursor.execute("INSERT INTO screenshot_counter (last_number) VALUES (?)", (current_number,))
    conn.commit()

    return current_number

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
def handle_norma(peer_id, from_id, message_id):
    admin_id = 730323700  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    screenshot_number = get_next_screenshot_number()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_role = get_user_role(from_id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
    if user_role is None:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞.",
            random_id=0
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = VkKeyboard(inline=True)
    keyboard.add_callback_button(label="+3", color=VkKeyboardColor.POSITIVE,
                                 payload={"action": "add_points", "points": 3, "user_id": from_id, "screenshot_number": screenshot_number})
    keyboard.add_callback_button(label="+5", color=VkKeyboardColor.PRIMARY,
                                 payload={"action": "add_points", "points": 5, "user_id": from_id, "screenshot_number": screenshot_number})
    keyboard.add_callback_button(label="+10", color=VkKeyboardColor.NEGATIVE,
                                 payload={"action": "add_points", "points": 10, "user_id": from_id, "screenshot_number": screenshot_number})
    keyboard.add_callback_button(label="0", color=VkKeyboardColor.SECONDARY,
                                 payload={"action": "add_points", "points": 0, "user_id": from_id, "screenshot_number": screenshot_number})

    mention = f"id{from_id}"

    # –ß–∏—Ç–∞–µ–º –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –±–µ—Å–µ–¥—ã –∏–∑ –ë–î
    attached_chats = get_attached_chats()

    if attached_chats:
        for chat in attached_chats:
            vk.messages.send(
                peer_id=chat,
                message=f"#{screenshot_number} üîπ –ü–æ–ª—É—á–µ–Ω —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ –æ—Ç [{mention}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]",
                forward_messages=message_id,  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º
                keyboard=keyboard.get_keyboard(),
                random_id=0
            )

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    vk.messages.send(
        peer_id=peer_id,
        message=f"‚úÖ –í–∞—à —Å–∫—Ä–∏–Ω—à–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ù–æ–º–µ—Ä: #{screenshot_number}",
        random_id=0
    )

def get_user_id_from_input(input_text):
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ ID
    id_pattern = re.compile(r'\[id(\d+)\|.+\]|@id(\d+)|https?://vk.com/id(\d+)')
    nick_pattern = re.compile(r'\[club(\d+)\|.+\]|@club(\d+)|https?://vk.com/club(\d+)')
    link_pattern = re.compile(r'https?://vk.com/([a-zA-Z0-9_]+)')

    match_id = id_pattern.match(input_text)
    match_nick = nick_pattern.match(input_text)
    match_link = link_pattern.match(input_text)

    if match_id:
        return match_id.group(1) or match_id.group(2) or match_id.group(3)
    elif match_nick:
        return match_nick.group(1) or match_nick.group(2) or match_nick.group(3)
    elif match_link:
        return get_user_id_by_nickname(match_link.group(1))
    else:
        return None

def get_user_id_by_nickname(nickname):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –í–ö–æ–Ω—Ç–∞–∫—Ç–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
    try:
        user_info = vk.method('users.get', {'user_ids': nickname})
        return user_info[0]['id'] if user_info else None
    except Exception as e:
        print(f"Error getting user ID by nickname: {e}")
        return None


def handle_check_binding(peer_id):
    cursor.execute("SELECT peer_id FROM bindings WHERE peer_id = ?", (peer_id,))
    result = cursor.fetchone()

    if result:
        vk.messages.send(
            peer_id=peer_id,
            message="‚úÖ –ë–µ—Å–µ–¥–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤.",
            random_id=0
        )
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –ë–µ—Å–µ–¥–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.",
            random_id=0
        )
def get_user_id_by_screen_name(screen_name):
    vk_session = vk_api.VkApi(token='vk1.a._Yx4344F-hfIDazZGzTuq74J3jZASNh0yA5ssw6sbBEZmWaOyP2I1-NqLsUinUzqQQjVFqG6eOA4BPAspKellBxzVBdkzb5tiepiP_cj8e7cUKHiCp5TvEv8QOOKKhBcm8umYZmz7vxSN7SE744d6psFRP0Zu9r5UK-ghkZcysMvYMqMoV0Vhz6Ml4e92Mla-XSUgBl9AaavG3MH2SjJCA')
    vk = vk_session.get_api()

    try:
        user_info = vk.users.get(user_ids=screen_name)
        return user_info[0]['id'] if user_info else None
    except vk_api.exceptions.VkApiError as e:
        print(f"Error retrieving user ID: {e}")
        return None
def set_inactivity_period(peer_id, mention, start_date, end_date, user_role):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ admin –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {peer_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /nektiv –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        target_user_id = extract_user_id(mention)
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /nektiv: {mention}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, inactive_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()
    if not binding:
        vk.messages.send(
            peer_id=peer_id,
            message="Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        return

    spreadsheet_id, sheet_name, id_column, inactive_column = binding

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ ID
    id_col_index = gspread.utils.a1_to_rowcol(f"{id_column}1")[1]
    id_values = sheet.col_values(id_col_index)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == target_user_id:
                target_row = idx
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message=f"[id{target_user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    try:
        sheet.update_acell(f"{inactive_column}{target_row}", f"{start_date} - {end_date}")
        vk.messages.send(
            peer_id=peer_id,
            message=f"–ü–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è [id{target_user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_date} - {end_date}.",
            random_id=0
        )
        logging.info(f"–ü–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è [id{target_user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {start_date} - {end_date}.")
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

def set_points_column(peer_id, column, user_role):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –±–∞–ª–ª–æ–≤.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_role} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /pointsheet –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–æ–ª–±—Ü–∞
    if not re.match(r'^[A-Z]+$', column.upper()):
        vk.messages.send(
            peer_id=peer_id,
            message="üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'C', 'D' –∏ —Ç.–¥.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /pointsheet: {column}")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
        UPDATE bindings
        SET points_column = ?
        WHERE peer_id = ?
    """, (column.upper(), peer_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    vk.messages.send(
        peer_id=peer_id,
        message=f"‚úÖ –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ **{column.upper()}**.",
        random_id=0
    )
    logging.info(f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –≤ –±–µ—Å–µ–¥–µ {peer_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {column.upper()}.")
def add_answers(peer_id, performer_id, mention, answers, reason, user_role):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ admin –∏ senmoder –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã
    if user_role not in ['admin', 'senmoder']:
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {performer_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ans –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
    if not str(answers).isdigit():
        vk.messages.send(
            peer_id=peer_id,
            message="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ /ans: {answers}")
        return

    answers = int(answers)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        target_user_id = extract_user_id(mention)
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /ans: {mention}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, answers_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()
    if not binding:
        vk.messages.send(
            peer_id=peer_id,
            message="Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã.")
        return

    spreadsheet_id, sheet_name, id_column, answers_column = binding

    if not answers_column:
        vk.messages.send(
            peer_id=peer_id,
            message="–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /anssheet –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.")
        return

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ ID
    id_col_index = gspread.utils.a1_to_rowcol(f"{id_column}1")[1]
    id_values = sheet.col_values(id_col_index)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == target_user_id:
                target_row = idx
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    try:
        current_answers_cell = f"{answers_column}{target_row}"
        current_answers = sheet.acell(current_answers_cell).value
        current_answers = int(current_answers) if current_answers.isdigit() else 0
    except Exception as e:
        current_answers = 0
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
    new_answers = current_answers + answers
    try:
        sheet.update_acell(current_answers_cell, new_answers)
        logging.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å {current_answers} –Ω–∞ {new_answers}.")
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤: {e}")
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        vk.messages.send(
            user_id=target_user_id,
            message=f"–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω–æ {answers} –æ—Ç–≤–µ—Ç–æ–≤.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {new_answers}.",
            random_id=0
        )
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}.")
    except ApiError as e:
        if e.code == 901:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É
    vk.messages.send(
        peer_id=peer_id,
        message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {answers} –æ—Ç–≤–µ—Ç–æ–≤.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–¢–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã: {new_answers}",
        random_id=0
    )
def set_answers_column(peer_id, column, user_role):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_role} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /anssheet –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Ç–æ–ª–±—Ü–∞
    if not re.match(r'^[A-Z]+$', column.upper()):
        vk.messages.send(
            peer_id=peer_id,
            message="üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'C', 'D' –∏ —Ç.–¥.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /anssheet: {column}")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("""
        UPDATE bindings
        SET answers_column = ?
        WHERE peer_id = ?
    """, (column.upper(), peer_id))
    conn.commit()

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    vk.messages.send(
        peer_id=peer_id,
        message=f"‚úÖ –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ **{column.upper()}**.",
        random_id=0
    )
    logging.info(f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ –±–µ—Å–µ–¥–µ {peer_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {column.upper()}.")

def set_warn_column(peer_id, column, user_role):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é {user_role} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /wsheet –±–µ–∑ –ø—Ä–∞–≤.")
        return

    if not re.match(r'^[A-Z]+$', column.upper()):
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'C', 'D' –∏ —Ç.–¥.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /wsheet: {column}")
        return

    cursor.execute("""
        UPDATE bindings
        SET warn_column = ?
        WHERE peer_id = ?
    """, (column.upper(), peer_id))
    conn.commit()
    vk.messages.send(
        peer_id=peer_id,
        message=f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≥–æ–≤–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {column.upper()}.",
        random_id=0
    )
    logging.info(f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≥–æ–≤–æ—Ä–æ–≤ –≤ –±–µ—Å–µ–¥–µ {peer_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {column.upper()}.")

def warn_user(peer_id, performer_id, mention, reason, user_role):
    """
    –í—ã–¥–∞–µ—Ç –≤—ã–≥–æ–≤–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ admin –∏ senmoder –º–æ–≥—É—Ç –≤—ã–¥–∞–≤–∞—Ç—å –≤—ã–≥–æ–≤–æ—Ä—ã
    if user_role not in ['admin', 'senmoder']:
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {performer_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /warn –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        target_user_id = extract_user_id(mention)
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /warn: {mention}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, warn_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()
    if not binding:
        vk.messages.send(
            peer_id=peer_id,
            message="Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—ã–¥–∞—Ç—å –≤—ã–≥–æ–≤–æ—Ä.")
        return

    spreadsheet_id, sheet_name, id_column, warn_column = binding

    if not warn_column:
        vk.messages.send(
            peer_id=peer_id,
            message="–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≥–æ–≤–æ—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wsheet –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≥–æ–≤–æ—Ä–æ–≤.")
        return

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ ID
    id_col_index = gspread.utils.a1_to_rowcol(f"{id_column}1")[1]
    id_values = sheet.col_values(id_col_index)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == target_user_id:
                target_row = idx
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤
    try:
        current_warn_cell = f"{warn_column}{target_row}"
        current_warn = sheet.acell(current_warn_cell).value
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "x/3", –≥–¥–µ x - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
        if current_warn:
            match = re.match(r'(\d+)/(\d+)', current_warn)
            if match:
                current_warn_count = int(match.group(1))
                max_warn = int(match.group(2))
            else:
                current_warn_count = 0
                max_warn = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            current_warn_count = 0
            max_warn = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        current_warn_count = 0
        max_warn = 3
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
    if current_warn_count >= max_warn:
        vk.messages.send(
            peer_id=peer_id,
            message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {current_warn_count}/{max_warn}.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} —É–∂–µ –∏–º–µ–µ—Ç {current_warn_count}/{max_warn} –≤—ã–≥–æ–≤–æ—Ä–æ–≤.")
        return

    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
    new_warn_count = current_warn_count + 1
    new_warn = f"{new_warn_count}/{max_warn}"

    try:
        sheet.update_acell(current_warn_cell, new_warn)
        logging.info(f"–í—ã–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å {current_warn} –Ω–∞ {new_warn}.")
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã–≥–æ–≤–æ—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        vk.messages.send(
            user_id=target_user_id,
            message=f"–í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –≤—ã–≥–æ–≤–æ—Ä.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {new_warn}.",
            random_id=0
        )
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–≥–æ–≤–æ—Ä–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}.")
    except ApiError as e:
        if e.code == 901:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É
    vk.messages.send(
        peer_id=peer_id,
        message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id} –≤—ã–¥–∞–Ω –≤—ã–≥–æ–≤–æ—Ä.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {new_warn}.",
        random_id=0
    )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º—É–º–∞ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
    if new_warn_count >= max_warn:
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            vk.groups.ban(
                group_id='227286490',  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π group_id
                user_id=target_user_id,
                end_date=0  # –ë–µ—Å—Å—Ä–æ—á–Ω—ã–π –±–∞–Ω; –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            )
            vk.messages.send(
                peer_id=peer_id,
                message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–≥–æ–≤–æ—Ä–æ–≤.",
                random_id=0
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ {new_warn_count}/{max_warn} –≤—ã–≥–æ–≤–æ—Ä–æ–≤.")
        except ApiError as e:
            vk.messages.send(
                peer_id=peer_id,
                message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id}.",
                random_id=0
            )
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}: {e}")

def extract_user_id(mention):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ @id123456 –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–≥–æ ID.
    """
    if mention.startswith('@id'):
        return int(mention[3:])
    elif mention.isdigit():
        return int(mention)
    else:
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –±–µ—Å–µ–¥—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
def handle_getscreen_command(peer_id, from_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–≤—è–∑–∫–∞ –¥–ª—è —ç—Ç–æ–π –±–µ—Å–µ–¥—ã
    cursor.execute("SELECT peer_id FROM bindings WHERE peer_id = ?", (peer_id,))
    result = cursor.fetchone()

    if result:
        # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–µ
        vk.messages.send(
            peer_id=peer_id,
            message="‚úÖ –≠—Ç–∞ –±–µ—Å–µ–¥–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω–æ–≤.",
            random_id=0
        )
    else:
        # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        cursor.execute("INSERT INTO bindings (peer_id) VALUES (?)", (peer_id,))
        vk.messages.send(
            peer_id=peer_id,
            message="‚úÖ –ë–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω–æ–≤.",
            random_id=0
        )

    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã –∏–∑ –ë–î
def get_attached_chats():
    cursor.execute("SELECT peer_id FROM bindings")
    chats = cursor.fetchall()
    return [chat[0] for chat in chats]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –±–µ—Å–µ–¥
def get_current_balance(user_id):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ Google –¢–∞–±–ª–∏—Ü –∏–ª–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, points_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()

    spreadsheet_id, sheet_name, id_column, points_column = binding

    sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)

    id_col_index = gspread.utils.a1_to_rowcol(f"{id_column}1")[1]
    id_values = sheet.col_values(id_col_index)

    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == user_id:
                target_row = idx
                break

    if target_row:
        current_points_cell = f"{points_column}{target_row}"
        current_points = sheet.acell(current_points_cell).value
        return int(current_points) if current_points.isdigit() else 0
    else:
        return 0
def add_points(peer_id, performer_id, mention, points, reason, user_role, send_notification=True):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã.
    –ë–∞–ª–ª—ã –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ –æ–±—â—É—é —è—á–µ–π–∫—É –∏ –≤ —è—á–µ–π–∫—É —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ admin –∏ senmoder –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –±–∞–ª–ª—ã
    if user_role not in ['admin', 'senmoder']:
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {performer_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /point –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
    if not str(points).isdigit():
        vk.messages.send(
            peer_id=peer_id,
            message="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–ª–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ /point: {points}")
        return

    points = int(points)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        target_user_id = extract_user_id(mention)
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /point: {mention}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, points_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()
    if not binding:
        vk.messages.send(
            peer_id=peer_id,
            message="Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã.")
        return

    spreadsheet_id, sheet_name, id_column, points_column = binding

    if not points_column:
        vk.messages.send(
            peer_id=peer_id,
            message="–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /psheet –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤.")
        return

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
    current_date = get_current_date()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
    date_col = get_date_column(sheet, current_date)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ ID
    id_col_letter = id_column.upper()
    id_col_index = gspread.utils.a1_to_rowcol(f"{id_col_letter}1")[1]
    id_values = sheet.col_values(id_col_index)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == target_user_id:
                target_row = idx
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message=f"[id{target_user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤ –≤ –æ–±—â–µ–π —è—á–µ–π–∫–µ
    try:
        current_points_cell = f"{points_column}{target_row}"
        current_points = sheet.acell(current_points_cell).value
        current_points = int(current_points) if current_points and current_points.isdigit() else 0
    except Exception as e:
        current_points = 0
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ –æ–±—â–µ–π —è—á–µ–π–∫–µ
    new_points = current_points + points
    try:
        sheet.update_acell(current_points_cell, new_points)
        logging.info(f"‚ú® –ë–∞–ª–ª—ã [id{target_user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å {current_points} –Ω–∞ {new_points} –≤ —è—á–µ–π–∫–µ {current_points_cell}.")
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –≤ –æ–±—â–µ–π —è—á–µ–π–∫–µ.",
            random_id=0
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –≤ –æ–±—â–µ–π —è—á–µ–π–∫–µ: {e}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤ –≤ —è—á–µ–π–∫–µ —Å –¥–∞—Ç–æ–π
    try:
        current_date_cell = gspread.utils.rowcol_to_a1(target_row, date_col)
        current_date_points = sheet.acell(current_date_cell).value
        current_date_points = int(current_date_points) if current_date_points and current_date_points.isdigit() else 0
    except Exception as e:
        current_date_points = 0
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤ –≤ —è—á–µ–π–∫–µ —Å –¥–∞—Ç–æ–π: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ –≤ —è—á–µ–π–∫–µ —Å –¥–∞—Ç–æ–π
    new_date_points = current_date_points + points
    try:
        sheet.update_acell(current_date_cell, new_date_points)
        logging.info(f"‚ú® –ë–∞–ª–ª—ã [id{target_user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å {current_date_points} –Ω–∞ {new_date_points} –≤ —è—á–µ–π–∫–µ {current_date_cell}.")
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –≤ —è—á–µ–π–∫–µ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π.",
            random_id=0
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –≤ —è—á–µ–π–∫–µ —Å –¥–∞—Ç–æ–π: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    try:
        vk.messages.send(
            user_id=target_user_id,
            message=f"–í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_points} –±–∞–ª–ª–æ–≤.",
            random_id=0
        )
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}.")
    except ApiError as e:
        if e.code == 901:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
    if send_notification:
        vk.messages.send(
            peer_id=peer_id,
            message=f"‚ú® –ë–∞–ª–ª—ã [id{target_user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –Ω–∞—á–∏—Å–ª–µ–Ω–æ {points} –±–∞–ª–ª–æ–≤ –Ω–∞ –¥–∞—Ç—É {current_date}.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_points}",
            random_id=0
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
def assign_role(performer_role, user_id, role, peer_id):
    """
    performer_role: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
    user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —Ä–æ–ª—å
    role: —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è
    peer_id: ID –±–µ—Å–µ–¥—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
    if performer_role == 'admin':
        allowed_roles = ['admin', 'senmoder', 'moder']
    elif performer_role == 'senmoder':
        allowed_roles = ['moder']
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π.",
            random_id=0
        )
        return

    if role not in allowed_roles:
        vk.messages.send(
            peer_id=peer_id,
            message=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª—å {role}.",
            random_id=0
        )
        return

    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
    cursor.execute("REPLACE INTO roles (user_id, role) VALUES (?, ?)", (user_id, role))
    conn.commit()

    role_message = {
        'admin': '–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.',
        'senmoder': '–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Å—Ç–∞—Ä—à–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.',
        'moder': '–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.'
    }

    try:
        vk.messages.send(
            user_id=user_id,
            message=role_message.get(role, '–í–∞—à–∞ —Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞.'),
            random_id=0
        )
    except ApiError as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        vk.messages.send(
            peer_id=peer_id,
            message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.",
            random_id=0
        )

    vk.messages.send(
        peer_id=peer_id,
        message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω {role}.",
        random_id=0
    )
    logging.info(f"–ù–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å {role} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π
def remove_role(performer_role, target_role, peer_id):
    """
    performer_role: —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω—è—é—â–µ–≥–æ –∫–æ–º–∞–Ω–¥—É
    target_role: —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
    peer_id: ID –±–µ—Å–µ–¥—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ä–æ–ª–∏ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if performer_role == 'admin':
        removable_roles = ['senmoder', 'moder']
    elif performer_role == 'senmoder':
        removable_roles = ['moder']
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–µ–π.",
            random_id=0
        )
        return False

    if target_role not in removable_roles:
        vk.messages.send(
            peer_id=peer_id,
            message=f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å —Ä–æ–ª—å {target_role}.",
            random_id=0
        )
        return False

    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_role(user_id, peer_id):
    try:
        vk.messages.send(
            user_id=user_id,
            message="–í–∞—à–∞ —Ä–æ–ª—å –±—ã–ª–∞ —Å–Ω—è—Ç–∞.",
            random_id=0
        )
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–æ –æ —Å–Ω—è—Ç–∏–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except ApiError as e:
        if e.code == 901:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor.execute("DELETE FROM roles WHERE user_id = ?", (user_id,))
    conn.commit()
    vk.messages.send(
        peer_id=peer_id,
        message=f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–∞.",
        random_id=0
    )
    logging.info(f"–°–Ω—è—Ç–∞ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_role(user_id):
    cursor.execute("SELECT role FROM roles WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if result:
        return result[0]
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
def bind_table(peer_id, table_id):
    cursor.execute("SELECT spreadsheet_id FROM bindings WHERE peer_id = ?", (peer_id,))
    result = cursor.fetchone()
    if result:
        vk.messages.send(
            peer_id=peer_id,
            message=f"–¢–∞–±–ª–∏—Ü–∞ —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞: {result[0]}. –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–∞–±–ª–∏—Ü—É.",
            random_id=0
        )
    else:
        cursor.execute("INSERT INTO bindings (peer_id, spreadsheet_id) VALUES (?, ?)", (peer_id, table_id))
        conn.commit()
        vk.messages.send(
            peer_id=peer_id,
            message=f"Google —Ç–∞–±–ª–∏—Ü–∞ {table_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.",
            random_id=0
        )
        logging.info(f"–ü—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table_id} –∫ –±–µ—Å–µ–¥–µ {peer_id}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞
def sync_sheet(peer_id, sheet_name):
    cursor.execute("SELECT spreadsheet_id FROM bindings WHERE peer_id = ?", (peer_id,))
    result = cursor.fetchone()
    if result:
        spreadsheet_id = result[0]
        try:
            sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
            cursor.execute("UPDATE bindings SET sheet_name = ? WHERE peer_id = ?", (sheet_name, peer_id))
            conn.commit()
            vk.messages.send(
                peer_id=peer_id,
                message=f"–õ–∏—Å—Ç {sheet_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.",
                random_id=0
            )
            logging.info(f"–ü—Ä–∏–≤—è–∑–∞–Ω –ª–∏—Å—Ç {sheet_name} –∫ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id} –≤ –±–µ—Å–µ–¥–µ {peer_id}.")
        except gspread.exceptions.WorksheetNotFound:
            vk.messages.send(
                peer_id=peer_id,
                message=f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
                random_id=0
            )
            logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ Google —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–∞–Ω–¥–æ–π /bind.",
            random_id=0
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
def unbind_table(peer_id):
    cursor.execute("SELECT spreadsheet_id FROM bindings WHERE peer_id = ?", (peer_id,))
    result = cursor.fetchone()
    if result:
        cursor.execute("DELETE FROM bindings WHERE peer_id = ?", (peer_id,))
        conn.commit()
        vk.messages.send(
            peer_id=peer_id,
            message="–¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞.",
            random_id=0
        )
        logging.info(f"–û—Ç–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {result[0]} –æ—Ç –±–µ—Å–µ–¥—ã {peer_id}.")
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="–¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.",
            random_id=0
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ –∏ –ª–∏—Å—Ç–µ
def sheet_info(peer_id):
    cursor.execute("SELECT spreadsheet_id, sheet_name FROM bindings WHERE peer_id = ?", (peer_id,))
    result = cursor.fetchone()
    if result:
        spreadsheet_id, sheet_name = result
        if sheet_name:
            vk.messages.send(
                peer_id=peer_id,
                message=f"–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_id}\n–õ–∏—Å—Ç: {sheet_name}.",
                random_id=0
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id} –∏ –ª–∏—Å—Ç–µ {sheet_name} –≤ –±–µ—Å–µ–¥—É {peer_id}.")
        else:
            vk.messages.send(
                peer_id=peer_id,
                message=f"üìä *–¢–µ–∫—É—â–∞—è —Ç–∞–±–ª–∏—Ü–∞:* {spreadsheet_id}\n –õ–∏—Å—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.*",
                random_id=0
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id} –±–µ–∑ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ –±–µ—Å–µ–¥—É {peer_id}.")
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.",
            random_id=0
        )
        logging.info(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.")
def remove_warn(peer_id, performer_id, mention, reason, user_role):
    """
    –£–º–µ–Ω—å—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ admin –∏ senmoder –º–æ–≥—É—Ç —Å–Ω–∏–º–∞—Ç—å –≤—ã–≥–æ–≤–æ—Ä—ã
    if user_role not in ['admin', 'senmoder']:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {performer_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /unwarn –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        target_user_id = extract_user_id(mention)
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="üö´ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /unwarn: {mention}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, warn_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()
    if not binding:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ö†Ô∏è Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–Ω—è—Ç—å –≤—ã–≥–æ–≤–æ—Ä.")
        return

    spreadsheet_id, sheet_name, id_column, warn_column = binding

    if not warn_column:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≥–æ–≤–æ—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /wsheet –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≤—ã–≥–æ–≤–æ—Ä–æ–≤.")
        return

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="üö´ –£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ ID
    id_col_index = gspread.utils.a1_to_rowcol(f"{id_column}1")[1]
    id_values = sheet.col_values(id_col_index)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == target_user_id:
                target_row = idx
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message="üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤
    try:
        current_warn_cell = f"{warn_column}{target_row}"
        current_warn = sheet.acell(current_warn_cell).value
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç "x/3", –≥–¥–µ x - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
        if current_warn:
            match = re.match(r'(\d+)/(\d+)', current_warn)
            if match:
                current_warn_count = int(match.group(1))
                max_warn = int(match.group(2))
            else:
                current_warn_count = 0
                max_warn = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            current_warn_count = 0
            max_warn = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    except Exception as e:
        current_warn_count = 0
        max_warn = 3
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
    if current_warn_count <= 0:
        vk.messages.send(
            peer_id=peer_id,
            message=f"‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤—ã–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è —Å–Ω—è—Ç–∏—è.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –∏–º–µ–µ—Ç –≤—ã–≥–æ–≤–æ—Ä–æ–≤.")
        return

    # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã–≥–æ–≤–æ—Ä–æ–≤
    new_warn_count = current_warn_count - 1
    new_warn = f"{new_warn_count}/{max_warn}"

    try:
        sheet.update_acell(current_warn_cell, new_warn)
        logging.info(f"–í—ã–≥–æ–≤–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å {current_warn} –Ω–∞ {new_warn}.")
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã–≥–æ–≤–æ—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        vk.messages.send(
            user_id=target_user_id,
            message=f"‚úÖ –° –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å–Ω—è—Ç –æ–¥–∏–Ω –≤—ã–≥–æ–≤–æ—Ä.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {new_warn}.",
            random_id=0
        )
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –≤—ã–≥–æ–≤–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}.")
    except ApiError as e:
        if e.code == 901:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É
    vk.messages.send(
        peer_id=peer_id,
        message=f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} —Å–Ω—è—Ç –æ–¥–∏–Ω –≤—ã–≥–æ–≤–æ—Ä.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}\n–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–≥–æ–≤–æ—Ä–æ–≤: {new_warn}.",
        random_id=0
    )
def set_id_column(peer_id, column, user_role):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–∫–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ VK –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_role} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /idsheet –±–µ–∑ –ø—Ä–∞–≤.")
        return

    if not re.match(r'^[A-Z]+$', column.upper()):
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'A', 'B' –∏ —Ç.–¥.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /idsheet: {column}")
        return

    cursor.execute("""
        UPDATE bindings
        SET id_column = ?
        WHERE peer_id = ?
    """, (column.upper(), peer_id))
    conn.commit()
    vk.messages.send(
        peer_id=peer_id,
        message=f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {column.upper()}.",
        random_id=0
    )
    logging.info(f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–µ—Å–µ–¥–µ {peer_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {column.upper()}.")


def set_menu_ranges(peer_id, columns, user_role):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: A, B, C.
    """
    if user_role != 'admin':
        vk.messages.send(peer_id=peer_id, message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", random_id=0)
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_role} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /menu –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    for col in columns:
        if not re.match(r'^[A-Z]+$', col.upper()):
            vk.messages.send(
                peer_id=peer_id,
                message=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ '{col}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, 'B' –∏–ª–∏ 'C'.",
                random_id=0
            )
            logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ '{col}' –≤ –∫–æ–º–∞–Ω–¥–µ /menu.")
            return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    display_columns = ','.join([col.upper() for col in columns])

    cursor.execute("""
        UPDATE bindings
        SET display_columns = ?
        WHERE peer_id = ?
    """, (display_columns, peer_id))
    conn.commit()

    vk.messages.send(
        peer_id=peer_id,
        message=f"–î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {display_columns}.",
        random_id=0
    )
    logging.info(f"–î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –±–µ—Å–µ–¥–µ {peer_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {display_columns}.")


def column_letter_to_index(column_letter):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±—É–∫–≤–µ–Ω–Ω–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'A') –≤ 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞.
    """
    try:
        return gspread.utils.a1_to_rowcol(f"{column_letter}1")[1] - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ 0-–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ '{column_letter}': {e}")
        return None


def get_stats(peer_id, user_id, user_role, requester_role):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if requester_role not in ['admin', 'senmoder'] and user_id != from_id:
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, display_columns FROM bindings WHERE peer_id = ?",
                   (peer_id,))
    binding = cursor.fetchone()

    # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not binding:
        spreadsheet_id = '1JiYbkshxYVIwaEiCJLkQQGYryKhovvYE1V0tAPjHgVc'
        sheet_name = 'IMPORT'
        id_column = 'A'
        display_columns = 'B,C,D,E,F,G,H,I,J,K,L,M'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    else:
        spreadsheet_id, sheet_name, id_column, display_columns = binding

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã
    all_values = sheet.get_all_values()
    if not all_values:
        vk.messages.send(
            peer_id=peer_id,
            message="–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.",
            random_id=0
        )
        logging.warning(f"–¢–∞–±–ª–∏—Ü–∞ {spreadsheet_id} –ø—É—Å—Ç–∞.")
        return

    headers = all_values[0]
    data_rows = all_values[1:]

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ id_column –∏–∑ –±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –≤ –∏–Ω–¥–µ–∫—Å
    id_col_index = column_letter_to_index(id_column.upper())
    if id_col_index is None:
        vk.messages.send(
            peer_id=peer_id,
            message=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ ID: '{id_column}'.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ ID: '{id_column}'.")
        return

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, row in enumerate(data_rows, start=2):
        if id_col_index >= len(row):
            continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ä–æ—á–µ
        cell = row[id_col_index]
        match = re.search(r'id(\d+)', cell)
        if match:
            extracted_id = int(match.group(1))
            if extracted_id == user_id:
                target_row = row
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    column_indexes = []
    if display_columns:
        for col in display_columns.split(','):
            col = col.strip().upper()
            col_index = column_letter_to_index(col)
            if col_index is not None:
                column_indexes.append(col_index)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message=f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ '{col}'.",
                    random_id=0
                )
                logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–ª–±—Ü–∞ '{col}'.")
                return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    stats_message = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ [id{user_id}|–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]:\n"
    for col_index in column_indexes:
        if col_index < len(headers):
            header = headers[col_index]
            value = target_row[col_index] if col_index < len(target_row) else "‚Äî"
            stats_message += f"{header}: {value}\n"
        else:
            stats_message += f"–°—Ç–æ–ª–±–µ—Ü {col_index + 1}: ‚Äî\n"

    vk.messages.send(
        peer_id=peer_id,
        message=stats_message,
        random_id=0
    )
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {user_id} –≤ –±–µ—Å–µ–¥—É {peer_id}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
def get_staff_list(peer_id):
    cursor.execute("SELECT user_id, role FROM roles WHERE role IN ('admin', 'senmoder', 'moder')")
    staff = cursor.fetchall()

    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–æ–ª–µ–π
    staff_message = "üë• *–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:*\n\n"

    roles = {
        'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:\n',
        'senmoder': '‚≠ê –°—Ç–∞—Ä—à–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:\n',
        'moder': 'üõ° –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:\n'
    }

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ —Ä–æ–ª–∏
    staff_dict = {
        'admin': [],
        'senmoder': [],
        'moder': []
    }

    if staff:
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
        for user_id, role in staff:
            user_info = vk.users.get(user_ids=user_id)
            user_name = f"[id{user_id}|{user_info[0]['first_name']} {user_info[0]['last_name']}]"
            staff_dict[role].append(f"üîπ {user_name}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –ø–æ –∫–∞–∂–¥–æ–π —Ä–æ–ª–∏
        for role, role_header in roles.items():
            staff_message += role_header
            if staff_dict[role]:
                staff_message += '\n'.join(staff_dict[role]) + '\n\n'
            else:
                staff_message += "üîπ –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n"
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤–æ–æ–±—â–µ
        staff_message += "üö´ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    vk.messages.send(
        peer_id=peer_id,
        message=staff_message,
        random_id=0
    )
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –≤ –±–µ—Å–µ–¥—É {peer_id}.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –±–µ—Å–µ–¥—ã
def handle_unbind_command(peer_id):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∏ –±–µ—Å–µ–¥–∞
    cursor.execute("SELECT peer_id FROM bindings WHERE peer_id = ?", (peer_id,))
    result = cursor.fetchone()

    if result:
        # –ï—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–∞, —É–¥–∞–ª—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É
        cursor.execute("DELETE FROM bindings WHERE peer_id = ?", (peer_id,))
        conn.commit()
        vk.messages.send(
            peer_id=peer_id,
            message="‚úÖ –ë–µ—Å–µ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω–∞.",
            random_id=0
        )
    else:
        vk.messages.send(
            peer_id=peer_id,
            message="‚ùå –ë–µ—Å–µ–¥–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞.",
            random_id=0
        )
def unset_points_column(peer_id, user_role):
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω—è—Ç—Å—è –±–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
    """
    if user_role != 'admin':
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_role} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /unpointsheet –±–µ–∑ –ø—Ä–∞–≤.")
        return

    cursor.execute("""
        UPDATE bindings
        SET points_column = NULL
        WHERE peer_id = ?
    """, (peer_id,))
    conn.commit()
    vk.messages.send(
        peer_id=peer_id,
        message="–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.",
        random_id=0
    )
    logging.info(f"–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –≤ –±–µ—Å–µ–¥–µ {peer_id} –±—ã–ª –æ—Ç–≤—è–∑–∞–Ω.")
def remove_points(peer_id, performer_id, mention, points, user_role):
    """
    –£–º–µ–Ω—å—à–∞–µ—Ç –±–∞–ª–ª—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤: —Ç–æ–ª—å–∫–æ admin –∏ senmoder –º–æ–≥—É—Ç —É–º–µ–Ω—å—à–∞—Ç—å –±–∞–ª–ª—ã
    if user_role not in ['admin', 'senmoder']:
        vk.messages.send(
            peer_id=peer_id,
            message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            random_id=0
        )
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {performer_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /unpoint –±–µ–∑ –ø—Ä–∞–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
    if not points.isdigit():
        vk.messages.send(
            peer_id=peer_id,
            message="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–∞–ª–ª–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ /unpoint: {points}")
        return

    points = int(points)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    try:
        target_user_id = extract_user_id(mention)
    except ValueError:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
            random_id=0
        )
        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /unpoint: {mention}")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    cursor.execute("SELECT spreadsheet_id, sheet_name, id_column, points_column FROM bindings WHERE peer_id = ?", (peer_id,))
    binding = cursor.fetchone()
    if not binding:
        vk.messages.send(
            peer_id=peer_id,
            message="Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /bind –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–ª—ã.")
        return

    spreadsheet_id, sheet_name, id_column, points_column = binding

    if not points_column:
        vk.messages.send(
            peer_id=peer_id,
            message="–°—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /psheet –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.",
            random_id=0
        )
        logging.warning(f"–í –±–µ—Å–µ–¥–µ {peer_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤.")
        return

    try:
        sheet = client.open_by_key(spreadsheet_id).worksheet(sheet_name)
    except gspread.exceptions.WorksheetNotFound:
        vk.messages.send(
            peer_id=peer_id,
            message="–£–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.warning(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞ ID
    id_col_index = gspread.utils.a1_to_rowcol(f"{id_column}1")[1]
    id_values = sheet.col_values(id_col_index)

    # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ —Å –Ω—É–∂–Ω—ã–º user_id
    target_row = None
    for idx, cell in enumerate(id_values, start=1):
        if re.search(r'id(\d+)', cell):
            extracted_id = re.search(r'id(\d+)', cell).group(1)
            if int(extracted_id) == target_user_id:
                target_row = idx
                break

    if not target_row:
        vk.messages.send(
            peer_id=peer_id,
            message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤
    try:
        current_points_cell = f"{points_column}{target_row}"
        current_points = sheet.acell(current_points_cell).value
        current_points = int(current_points) if current_points.isdigit() else 0
    except Exception as e:
        current_points = 0
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö –±–∞–ª–ª–æ–≤: {e}")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤ (—É–º–µ–Ω—å—à–µ–Ω–∏–µ)
    new_points = current_points - points
    if new_points < 0:
        new_points = 0  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –±–∞–ª–ª–æ–≤

    try:
        sheet.update_acell(current_points_cell, new_points)
        logging.info(f"–ë–∞–ª–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {target_user_id} —É–º–µ–Ω—å—à–µ–Ω—ã —Å {current_points} –Ω–∞ {points}. –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_points}.")
    except Exception as e:
        vk.messages.send(
            peer_id=peer_id,
            message="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–ª—ã –≤ —Ç–∞–±–ª–∏—Ü–µ.",
            random_id=0
        )
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤: {e}")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        vk.messages.send(
            user_id=target_user_id,
            message=f"–í–∞–º –±—ã–ª–æ —Å–ø–∏—Å–∞–Ω–æ {points} –±–∞–ª–ª–æ–≤. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_points} –±–∞–ª–ª–æ–≤.",
            random_id=0
        )
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–ø–∏—Å–∞–Ω–∏–∏ –±–∞–ª–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id}.")
    except ApiError as e:
        if e.code == 901:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        else:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–µ—Å–µ–¥—É
    vk.messages.send(
        peer_id=peer_id,
        message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {target_user_id} —Å–ø–∏—Å–∞–Ω–æ {points} –±–∞–ª–ª–æ–≤.",
        random_id=0
    )

def extract_user_id(mention: str):
    # –£–¥–∞–ª–∏–º –ø—Ä–µ—Ñ–∏–∫—Å http:// –∏–ª–∏ https://, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    mention = re.sub(r'^https?://', '', mention)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ [id123|@nickname]
    if mention.startswith('[') and '|' in mention:
        match = re.match(r'\[(id\d+|\w+)\|@?[\w\-_]+\]', mention)
        if match:
            identifier = match.group(1)
            if identifier.startswith('id'):  # –§–æ—Ä–º–∞—Ç [id123|@nickname]
                return int(identifier[2:])
            else:
                return get_user_id_by_screen_name(identifier)  # –§–æ—Ä–º–∞—Ç [nickname|@nickname]

    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –í–ö (vk.com/id12345 –∏–ª–∏ vk.com/nickname)
    if mention.startswith('vk.com'):
        match = re.search(r'vk\.com/(id\d+|[\w\-_]+)', mention)
        if match:
            identifier = match.group(1)
            if identifier.startswith('id'):  # vk.com/id12345
                return int(identifier[2:])
            else:
                return get_user_id_by_screen_name(identifier)  # vk.com/nickname

    # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å ID –∏–ª–∏ –Ω–∏–∫
    elif mention.startswith('@'):
        mention = mention[1:]  # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª @
        if mention.startswith('id'):  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç @id12345
            return int(mention[2:])
        else:
            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç @nickname, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ screen_name
            return get_user_id_by_screen_name(mention)

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID
    elif mention.isdigit():
        return int(mention)

    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id, @–Ω–∏–∫, —Å—Å—ã–ª–∫—É –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.")
def handle_button_click(event_data):
    user_id = event_data['user_id']  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    peer_id = event_data['peer_id']  # ID –±–µ—Å–µ–¥—ã
    conversation_message_id = event_data['conversation_message_id']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è
    payload = event_data['payload']  # –î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ payload
    action = payload.get('action')
    points = payload.get('points')
    target_user_id = payload.get('user_id')

    if action == "add_points" and points:
        points = int(points)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
        cursor.execute("SELECT role FROM roles WHERE user_id = ?", (user_id,))
        role = cursor.fetchone()
        user_role = role[0] if role else 'user'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
        if user_role not in ['admin', 'senmoder']:
            vk.messages.send(
                peer_id=peer_id,
                message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤.",
                random_id=0
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –≤ Google –¢–∞–±–ª–∏—Ü–µ
        add_points(peer_id, user_id, f"@id{target_user_id}", points, "–ù–æ—Ä–º–∞—Ç–∏–≤", user_role)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å, –∫—Ç–æ –≤—ã–¥–∞–ª –±–∞–ª–ª—ã –∏ —Å–∫–æ–ª—å–∫–æ
        try:
            vk.messages.edit(
                peer_id=peer_id,
                conversation_message_id=conversation_message_id,
                message=f"‚úÖ {points} –±–∞–ª–ª–æ–≤ –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é [id{target_user_id}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å].\n–í—ã–¥–∞–ª: [id{user_id}|–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]."
            )
        except ApiError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
def get_help_message(role):
    commands = {
        'admin': [
            "/addadmin ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "/addsenmoder ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å—Ç–∞—Ä—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
            "/addmoder ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
            "/rrole ‚Äî –°–Ω—è—Ç—å —Ä–æ–ª—å",
            "/bind ‚Äî –ü—Ä–∏–≤—è–∑–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É",
            "/unbind ‚Äî –û—Ç–≤—è–∑–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É",
            "/sync ‚Äî –ü—Ä–∏–≤—è–∑–∞—Ç—å –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã",
            "/sheetinfo ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ –∏ –ª–∏—Å—Ç–µ",
            "/staff ‚Äî –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "/psheet ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤",
            "/stats ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ ID, –Ω–∏–∫—É, —Å—Å—ã–ª–∫–µ –∏ reply)",
            "/warn ‚Äî –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "/unwarn ‚Äî –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "/point ‚Äî –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã",
            "/unpoint ‚Äî –£–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–ª—ã",
            "/wsheet ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
            "/unscr - –û—Ç–≤—è–∑–∫–∞ –±–µ—Å–µ–¥—ã",
            "/scr - –ø—Ä–∏–≤—è–∑–∫–∞ –±–µ—Å–µ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∫—Ä–∏–Ω–æ–≤"
            "/neaktiv - –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤"
            "/nsheet - —É—Å—Ç–æ–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–æ–≤"
            "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"

        ],
        'senmoder': [
            "/addmoder ‚Äî –ù–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
            "/rrole ‚Äî –°–Ω—è—Ç—å —Ä–æ–ª—å",
            "/staff ‚Äî –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "/psheet ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –±–∞–ª–ª–æ–≤",
            "/stats ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ ID, –Ω–∏–∫—É, —Å—Å—ã–ª–∫–µ –∏ reply)",
            "/warn ‚Äî –í—ã–¥–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "/unwarn ‚Äî –°–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
            "/point ‚Äî –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã",
            "/unpoint ‚Äî –£–º–µ–Ω—å—à–∏—Ç—å –±–∞–ª–ª—ã",
            "/wsheet ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π",
            "/checkscr - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏"

            "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        ],
        'moder': [
            "/staff ‚Äî –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "/stats ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø–æ ID, –Ω–∏–∫—É, —Å—Å—ã–ª–∫–µ –∏ reply)",
            "/help ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
        ],
        None: [
            "/help ‚Äî –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
        ]
    }

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    help_message = f"üìã *–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è {role if role else '–≥–æ—Å—Ç—è'}:* \n\n"
    help_message += "\n".join(commands.get(role, commands[None]))

    return help_message

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.message['text']
        peer_id = event.object.message['peer_id']
        from_id = event.object.message['from_id']

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_user_role(from_id)

        # –†–∞–∑–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if message.startswith('/'):
            parts = message.split()
            command = parts[0].lower()
            args = parts[1:]

            if command == '/wsheet' and user_role in ['admin', 'senmoder']:
                if len(args) != 1:
                    vk.messages.send(
                        peer_id=peer_id,
                        message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /wsheet [—Å—Ç–æ–ª–±–µ—Ü]",
                        random_id=0
                    )
                else:
                    column = args[0]
                    set_warn_column(peer_id, column, user_role)
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.message
        peer_id = message['peer_id']
        text = message['text'].strip()
        from_id = message['from_id']

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_id} –≤ –±–µ—Å–µ–¥–µ {peer_id}: {text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_role = get_user_role(from_id)
        logging.info(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_id}: {user_role}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if text.startswith('/addadmin') and user_role in ['admin']:
            parts = text.split(' ', 1)
            if len(parts) == 2:
                mention = parts[1].strip()
                try:
                    user_id = extract_user_id(mention)
                    assign_role(user_role, user_id, 'admin', peer_id)
                except ValueError:
                    vk.messages.send(peer_id=peer_id, message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
                                     random_id=0)
                    logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /addadmin: {mention}")
            else:
                vk.messages.send(peer_id=peer_id, message="–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @id –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏.", random_id=0)
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /addadmin –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è ID.")
        elif text == '/start':
            send_start_message(peer_id)
        elif text.startswith('/warn') and user_role in ['admin', 'senmoder']:
            parts = text.split(' ', 2)
            if len(parts) >= 2:
                mention = parts[1].strip()
                reason = parts[2].strip() if len(parts) >= 3 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                warn_user(peer_id, from_id, mention, reason, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /warn @id –∏–ª–∏ ID [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: /warn @id12345 –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /warn –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")
        elif text.startswith('/checkbinding') and user_role in ['admin']:
            handle_check_binding(peer_id)
        elif text.lower() == "/unscr":
            if user_role == 'admin':  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –æ—Ç–≤—è–∑–∞—Ç—å –±–µ—Å–µ–¥—É
                handle_unbind_command(peer_id)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    random_id=0
                )
        elif text.startswith('/addsenmoder') and user_role in ['admin']:
            parts = text.split(' ', 1)
            if len(parts) == 2:
                mention = parts[1].strip()
                try:
                    user_id = extract_user_id(mention)
                    assign_role(user_role, user_id, 'senmoder', peer_id)
                except ValueError:
                    vk.messages.send(peer_id=peer_id, message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
                                     random_id=0)
                    logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /addsenmoder: {mention}")
            else:
                vk.messages.send(peer_id=peer_id, message="–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @id –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏.", random_id=0)
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /addsenmoder –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è ID.")
        elif text.startswith('/ne–∞ktiv') and user_role == 'admin':
            parts = text.split(' ', 4)
            if len(parts) == 4:
                mention = parts[1].strip()
                start_date = parts[2].strip()
                end_date = parts[3].strip()
                add_inactivity_period(peer_id, from_id, mention, start_date, end_date, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ne–∞ktiv @id –î–î.–ú–ú.–ì–ì–ì–ì –î–î.–ú–ú.–ì–ì–ì–ì\n–ü—Ä–∏–º–µ—Ä: /ne–∞ktiv @id12345 10.10.2024 12.10.2024",
                    random_id=0
                )

        elif text.startswith('/nsheet') and user_role == 'admin':
            parts = text.split(' ', 2)
            if len(parts) == 2:
                column = parts[1].strip()
                set_nektiv_column(peer_id, column, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /nsheet —Å—Ç–æ–ª–±–µ—Ü\n–ü—Ä–∏–º–µ—Ä: /nsheet E",
                    random_id=0
                )

        elif text.startswith('/addmoder') and user_role in ['admin', 'senmoder']:
            parts = text.split(' ', 1)
            if len(parts) == 2:
                mention = parts[1].strip()
                try:
                    user_id = extract_user_id(mention)
                    assign_role(user_role, user_id, 'moder', peer_id)
                except ValueError:
                    vk.messages.send(peer_id=peer_id, message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
                                     random_id=0)
                    logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /addmoder: {mention}")
            else:
                vk.messages.send(peer_id=peer_id, message="–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @id –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏.", random_id=0)
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /addmoder –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è ID.")

        # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /rrole –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–µ–π
        elif text.startswith('/rrole') and user_role in ['admin', 'senmoder']:
            parts = text.split(' ', 1)
            if len(parts) == 2:
                mention = parts[1].strip()
                try:
                    target_user_id = extract_user_id(mention)
                    target_role = get_user_role(target_user_id)

                    if not target_role:
                        vk.messages.send(peer_id=peer_id, message="–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–∏.", random_id=0)
                        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} –Ω–µ –∏–º–µ–µ—Ç —Ä–æ–ª–∏ –¥–ª—è —Å–Ω—è—Ç–∏—è.")
                        continue

                    if remove_role(user_role, target_role, peer_id):
                        delete_role(target_user_id, peer_id)
                except ValueError:
                    vk.messages.send(peer_id=peer_id, message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.",
                                     random_id=0)
                    logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /rrole: {mention}")
            else:
                vk.messages.send(peer_id=peer_id, message="–£–∫–∞–∂–∏—Ç–µ ID –∏–ª–∏ @id –¥–ª—è —Å–Ω—è—Ç–∏—è —Ä–æ–ª–∏.", random_id=0)
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /rrole –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è ID.")
        elif text.startswith('/point') and user_role in ['admin', 'senmoder']:
            parts = text.split(' ', 3)
            if len(parts) >= 3:
                mention = parts[1].strip()
                points = parts[2].strip()
                reason = parts[3].strip() if len(parts) >= 4 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                add_points(peer_id, from_id, mention, points, reason, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /point @id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: /point @id12345 10 –ó–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /point –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
        elif text.startswith('/bind') and user_role in ['admin']:
            parts = text.split(' ', 1)
            if len(parts) == 2:
                table_id = parts[1].strip()
                bind_table(peer_id, table_id)
            else:
                vk.messages.send(peer_id=peer_id, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /bind.",
                                 random_id=0)
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /bind –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è ID —Ç–∞–±–ª–∏—Ü—ã.")

        elif text.startswith('/sync') and user_role in ['admin']:
            parts = text.split(' ', 1)
            if len(parts) == 2:
                sheet_name = parts[1].strip()
                sync_sheet(peer_id, sheet_name)
            else:
                vk.messages.send(peer_id=peer_id, message="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /sync.",
                                 random_id=0)
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /sync –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞.")

        elif text.startswith('/sheetinfo') and user_role in ['admin']:
            sheet_info(peer_id)

        elif text.startswith('/unbind') and user_role in ['admin']:
            unbind_table(peer_id)
        elif text.startswith('/help'):
            help_message = get_help_message(user_role)
            vk.messages.send(
                peer_id=peer_id,
                message=help_message,
                random_id=0
            )

        # –ö–æ–º–∞–Ω–¥–∞ /staff –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —Å—Ç–∞—Ä—à–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
        elif text.startswith('/staff'):
            if user_role in ['admin', 'senmoder', 'moder']:
                get_staff_list(peer_id)
            else:
                vk.messages.send(peer_id=peer_id, message="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", random_id=0)
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /staff –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞.")

        # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        elif text.startswith('/menu') and user_role in ['admin']:
            parts = text.split()
            if len(parts) > 1:
                columns = parts[1:]  # –≤—Å–µ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã - —ç—Ç–æ —Å—Ç–æ–ª–±—Ü—ã
                set_menu_ranges(peer_id, columns, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /menu <—Å—Ç–æ–ª–±–µ—Ü 1> <—Å—Ç–æ–ª–±–µ—Ü 2> ... <—Å—Ç–æ–ª–±–µ—Ü N>\n–ü—Ä–∏–º–µ—Ä: /menu B C D",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /menu –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")


        elif text.startswith('/psheet') and user_role in ['admin']:
            parts = text.split()
            if len(parts) == 2:
                column = parts[1].strip().upper()
                # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /pointsheet:
                set_points_column(peer_id, column, user_role)
                # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
                # unset_points_column(peer_id, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /psheet <—Å—Ç–æ–ª–±–µ—Ü>\n–ü—Ä–∏–º–µ—Ä: /psheet C",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /psheet –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")
        elif text.startswith('/repsheet') and user_role in ['admin']:
            parts = text.split()
            if len(parts) == 2:
                column = parts[1].strip().upper()
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ /pointsheet:
                set_answers_column(peer_id, column, user_role)
                # –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü, –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
                # unset_answers_column(peer_id, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /repsheet <—Å—Ç–æ–ª–±–µ—Ü>\n–ü—Ä–∏–º–µ—Ä: /anssheet C",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /repsheet –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")
        elif text.startswith('/rep') and user_role in ['admin', 'senmoder']:
            parts = text.split(' ', 3)
            if len(parts) >= 3:
                mention = parts[1].strip()
                answers = parts[2].strip()
                reason = parts[3].strip() if len(parts) >= 4 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                add_answers(peer_id, from_id, mention, answers, reason, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rep @id –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: /ans @id12345 5 –ó–∞ –ø–æ–º–æ—â—å –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è—Ö",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /rep –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")


        elif text.startswith('/unpoint') and user_role in ['admin', 'senmoder','admin']:
            parts = text.split()
            if len(parts) == 3:
                mention = parts[1].strip()
                points = parts[2].strip()
                remove_points(peer_id, from_id, mention, points, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unpoint @id –∏–ª–∏ ID <–±–∞–ª–ª—ã>\n–ü—Ä–∏–º–µ—Ä: /unpoint @id12345 5",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /unpoint –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

        elif text.startswith('/idsheet') and user_role in ['admin']:
            parts = text.split()
            if len(parts) == 2:
                column = parts[1].strip().upper()
                set_id_column(peer_id, column, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /idsheet <—Å—Ç–æ–ª–±–µ—Ü>\n–ü—Ä–∏–º–µ—Ä: /idsheet A",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /idsheet –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")
        elif text.startswith('/unwarn') and user_role in ['admin', 'senmoder']:
            parts = text.split(' ', 2)
            if len(parts) >= 2:
                mention = parts[1].strip()
                reason = parts[2].strip() if len(parts) >= 3 else "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
                remove_warn(peer_id, from_id, mention, reason, user_role)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unwarn @id –∏–ª–∏ ID [–ø—Ä–∏—á–∏–Ω–∞]\n–ü—Ä–∏–º–µ—Ä: /unwarn @id12345 –ü–æ–≤–µ–¥–µ–Ω–∏–µ —É–ª—É—á—à–∏–ª–æ—Å—å",
                    random_id=0
                )
                logging.warning("–ö–æ–º–∞–Ω–¥–∞ /unwarn –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.")

        if (text.startswith('/stats') or text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') and user_role in ['admin', 'senmoder', 'moder']:
            parts = text.split(maxsplit=1)
            if len(parts) == 1:
                # –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                get_stats(peer_id, from_id, user_role, user_role)
            elif len(parts) == 2:
                # –ö–æ–º–∞–Ω–¥–∞ /stats @id
                if user_role in ['admin', 'senmoder']:
                    mention = parts[1].strip()
                    try:
                        target_user_id = extract_user_id(mention)
                        get_stats(peer_id, target_user_id, user_role, user_role)
                    except ValueError:
                        vk.messages.send(peer_id=peer_id,
                                         message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @id –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID.", random_id=0)
                        logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –≤ –∫–æ–º–∞–Ω–¥–µ /stats: {mention}")
                else:
                    vk.messages.send(peer_id=peer_id,
                                     message="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                                     random_id=0)
                    logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats @id –±–µ–∑ –ø—Ä–∞–≤.")
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –∏–ª–∏ /stats @id.",
                    random_id=0
                )
                logging.warning(f"–ö–æ–º–∞–Ω–¥–∞ /stats –≤—ã–∑–≤–∞–Ω–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {text}")
    if event.type == VkBotEventType.MESSAGE_NEW:
        message = event.object.message
        peer_id = message['peer_id']
        from_id = message['from_id']
        text = message['text'].strip()

        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_id} –≤ –±–µ—Å–µ–¥–µ {peer_id}: {text}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT role FROM roles WHERE user_id = ?", (from_id,))
        role = cursor.fetchone()
        user_role = role[0] if role else 'user'
        logging.info(f"–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_id}: {user_role}")
        if text.lower() == "/scr":
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_role == 'admin':  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å –±–µ—Å–µ–¥—É
                handle_getscreen_command(peer_id, from_id)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    random_id=0
                )
        elif text.lower() == "/unscr" and user_role in ['admin', 'senmoder']:
            # –û—Ç–≤—è–∑–∫–∞ –±–µ—Å–µ–¥—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
            if user_role == 'admin':
                handle_unbindscreen_command(peer_id)
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
                    random_id=0
                )

        elif text.lower() == "/checkscr" and user_role in ['admin', 'senmoder']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–≤—è–∑–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            handle_checkscreen_command(peer_id)

        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /norma
        if text.lower() == "/norma" and user_role in ['admin', 'senmoder', 'moder']:
            if user_role in ['admin', 'senmoder', 'moder']:
                vk.messages.send(
                    peer_id=peer_id,
                    message="üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–∞.",
                    random_id=0
        )
            else:
                vk.messages.send(
                    peer_id=peer_id,
                    message="‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞.",
            random_id=0
        )
        elif 'attachments' in message and len(message['attachments']) > 0:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            handle_norma(peer_id, from_id, message['id'])
        elif event.type == VkBotEventType.MESSAGE_EVENT:
            event_data = event.object
            handle_button_click(event_data)


        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    elif event.type == VkBotEventType.MESSAGE_EVENT:
        event_data = event.object
        payload = event_data.get('payload', {})
        action_data = payload

        if action_data.get('action') == 'add_points':
            points = int(action_data.get('points'))
        target_user_id = action_data.get('user_id')
        performer_id = event_data.get('user_id')  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        peer_id = event_data.get('peer_id')
        conversation_message_id = event_data.get('conversation_message_id')  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–µ—Å–µ–¥–µ
        screenshot_number = action_data.get('screenshot_number')  # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å–∫—Ä–∏–Ω—à–æ—Ç–∞

        mention = f"https://vk.com/id{target_user_id}"
        reason = "–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞"
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è

        # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_points
        user_role = "admin"  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å admin –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤
        current_points = get_current_balance(target_user_id)

        # –õ–æ–∫–∞–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        new_points = current_points + points

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—á–µ—Ç–Ω—ã–º –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        vk.messages.edit(
            peer_id=peer_id,
            message=f"#{screenshot_number} üíé [{mention}|–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] –ø–æ–ª—É—á–∏–ª {points} –±–∞–ª–ª–æ–≤!*\n"
                    f"*–ù–∞—á–∏—Å–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: [id{performer_id}|–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä]*\n"
                    f"*–ü—Ä–∏—á–∏–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {reason}*\n"
                    f"–î–∞—Ç–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {current_time}\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_points} –±–∞–ª–ª–æ–≤",
            conversation_message_id=conversation_message_id
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–ª—ã –≤ Google –¢–∞–±–ª–∏—Ü–∞—Ö
        add_points(peer_id, performer_id, mention, points, reason, user_role, send_notification=False)

